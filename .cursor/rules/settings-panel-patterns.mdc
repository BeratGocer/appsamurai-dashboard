
# Settings Panel Patterns

## Column Label Function
Always define `getColumnLabel()` function in SettingsPanel:

```tsx
const getColumnLabel = (column: string): string => {
  const columnLabels: Record<string, string> = {
    installs: 'Install',
    roas_d0: 'ROAS D0',
    roas_d1: 'ROAS D1',
    roas_d2: 'ROAS D2',
    roas_d3: 'ROAS D3',
    roas_d4: 'ROAS D4',
    roas_d5: 'ROAS D5',
    roas_d6: 'ROAS D6',
    roas_d7: 'ROAS D7',
    roas_d14: 'ROAS D14',
    roas_d21: 'ROAS D21',
    roas_d30: 'ROAS D30',
    roas_d45: 'ROAS D45',
    roas_d60: 'ROAS D60',
    retention_rate_d1: 'Retention D1',
    retention_rate_d7: 'Retention D7',
    retention_rate_d14: 'Retention D14',
    retention_rate_d30: 'Retention D30',
    ecpi: 'eCPI',
    adjust_cost: 'Maliyet',
    ad_revenue: 'Gelir',
    gross_profit: 'Kar',
  };
  return columnLabels[column] || column;
};
```

## Per-File Settings Persistence
Reference: [src/components/Dashboard.tsx](mdc:src/components/Dashboard.tsx)

```tsx
// Settings key generation
const getSettingsKey = () => {
  return activeFileId ? `dashboard-settings-${activeFileId}` : 'dashboard-settings-default';
};

// Load settings for current file
const loadFileSettings = (fileId: string | null) => {
  const settingsKey = fileId ? `dashboard-settings-${fileId}` : 'dashboard-settings-default';
  const saved = localStorage.getItem(settingsKey);
  if (saved) {
    try {
      return JSON.parse(saved);
    } catch {
      // If parsing fails, return default
    }
  }
  return defaultSettings;
};

// Save settings
const handleSettingsChange = (newSettings: SettingsData) => {
  setSettings(newSettings);
  const settingsKey = getSettingsKey();
  localStorage.setItem(settingsKey, JSON.stringify(newSettings));
};
```

## Settings Data Structure
```tsx
export interface SettingsData {
  dateRange: DateRange;
  conditionalRules: ConditionalFormattingRule[];
  visibleColumns?: string[];
}

export interface DateRange {
  startDate: string;
  endDate: string;
}

export interface ConditionalFormattingRule {
  id: string;
  column: string;
  operator: '<' | '>' | '>=' | '<=' | '=';
  value: number;
  color: string;
  backgroundColor: string;
  isActive: boolean;
}
```

## Compact UI Standards
- Card: `mb-4` (not `mb-6`)
- Header: `pb-2` (not `pb-3`)
- Content: `space-y-4` (not `space-y-6`)
- Buttons: `h-7` for presets, `h-8` for inputs
- Text: `text-xs` for labels, `text-sm` for content
- Padding: `p-2` for compact, `p-3` for standard

## Color Presets
```tsx
const COLOR_PRESETS = [
  { name: 'Yeşil', color: '#16a34a', backgroundColor: '#dcfce7' },
  { name: 'Kırmızı', color: '#dc2626', backgroundColor: '#fee2e2' },
  { name: 'Sarı', color: '#ca8a04', backgroundColor: '#fef3c7' },
  { name: 'Mavi', color: '#2563eb', backgroundColor: '#dbeafe' },
  { name: 'Mor', color: '#9333ea', backgroundColor: '#f3e8ff' },
  { name: 'Turuncu', color: '#ea580c', backgroundColor: '#fed7aa' },
  { name: 'Pembe', color: '#db2777', backgroundColor: '#fce7f3' },
  { name: 'Gri', color: '#6b7280', backgroundColor: '#f3f4f6' },
];
```

## Critical Requirements
- ✅ Always define `getColumnLabel()` function
- ✅ Use per-file settings persistence
- ✅ Provide sensible default settings
- ✅ Handle JSON parsing errors gracefully
- ✅ Use compact UI patterns
- ✅ Remove unnecessary explanatory text

## Complete Implementation
See [src/components/SettingsPanel.tsx](mdc:src/components/SettingsPanel.tsx) for full settings panel implementation with all sections.