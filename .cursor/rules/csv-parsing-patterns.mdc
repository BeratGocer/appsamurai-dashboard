
# CSV Parsing Patterns

## Data Structure
Campaign data follows this structure defined in [src/types/index.ts](mdc:src/types/index.ts):
```typescript
interface CampaignData {
  app: string;
  campaign_network: string;
  adgroup_network: string;
  day: string;
  installs: number;
  ecpi: number | null;
  cost: number | null;
  all_revenue: number | null;
  roas_d0: number | null;
  roas_d1: number | null;
  // ... additional roas fields
}
```

## Parsing Logic
- **Frontend**: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) handles initial parsing
- **Backend**: [server/src/index.ts](mdc:server/src/index.ts) handles robust parsing with error handling

## Key Parsing Features
1. **Header Validation**: Required fields checked before processing
2. **BOM Handling**: Byte Order Mark characters removed
3. **Quote Handling**: Proper parsing of quoted fields with commas
4. **Numeric Sanitization**: Empty/invalid values converted to null
5. **Batching**: Database inserts in chunks of 1000 rows

## Error Handling
- **Malformed CSV**: Skip problematic rows, log errors
- **Missing Headers**: Return validation error
- **Invalid Data**: Sanitize to null values
- **Database Limits**: Use batching with fallback to individual inserts

## Data Validation
Required headers: `app`, `campaign_network`, `adgroup_network`, `day`, `installs`
Numeric fields: `ecpi`, `cost`, `all_revenue`, `roas_d*` (all ROAS fields)