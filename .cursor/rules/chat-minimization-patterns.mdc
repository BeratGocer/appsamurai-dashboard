---
alwaysApply: true
description: Chat minimization and state management patterns
---

# Chat Minimization Patterns

## Minimization State Management
The chat system supports three distinct states:

```typescript
interface ChatContextType {
  isOpen: boolean        // Chat is visible
  isMinimized: boolean  // Chat is minimized (small form)
  setIsMinimized: (minimized: boolean) => void
}
```

## State Transitions
1. **Closed → Open**: Click chat button → `setIsOpen(true)`
2. **Open → Minimized**: Click minimize button → `setIsMinimized(true)`
3. **Minimized → Full**: Click maximize button → `setIsMinimized(false)`
4. **Any State → Closed**: Click close button → `setIsOpen(false)`

## UI State Rendering
Conditional rendering based on state combinations:

```typescript
{/* Chat Toggle Button - Only when closed */}
{!isOpen && (
  <button className="fixed bottom-4 right-4 z-50...">
    <MessageSquare className="w-5 h-5" />
  </button>
)}

{/* Minimized Panel - Small floating form */}
{isOpen && isMinimized && (
  <div className="fixed bottom-4 right-4 z-50 bg-card border rounded-lg shadow-xl">
    <div className="p-3 border-b flex items-center justify-between">
      <div className="font-semibold text-sm">Yardımcı</div>
      <div className="flex items-center gap-1">
        <button onClick={() => setIsMinimized(false)}>
          <Maximize2 className="w-3 h-3" />
        </button>
        <button onClick={() => setIsOpen(false)}>
          <X className="w-3 h-3" />
        </button>
      </div>
    </div>
    {/* Input field and send button */}
  </div>
)}

{/* Full Panel - Takes entire right side */}
{isOpen && !isMinimized && (
  <div className="fixed top-0 right-0 h-full w-80 md:w-96 bg-card border-l shadow-xl z-50">
    <div className="p-4 border-b flex items-center justify-between">
      <div className="font-semibold text-lg">Yardımcı</div>
      <div className="flex items-center gap-1">
        <button onClick={() => setIsMinimized(true)}>
          <Minimize2 className="w-4 h-4" />
        </button>
        <button onClick={() => setIsOpen(false)}>
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
    {/* Full chat interface */}
  </div>
)}
```

## Minimized Panel Features
The minimized state provides:
- **Compact Header**: Title + maximize/close buttons
- **Input Field**: Single line text input
- **Send Button**: Send message without opening full panel
- **Positioning**: Fixed bottom-right corner

## Z-Index Management
Critical z-index values for proper layering:

```typescript
// Chat toggle button
className="fixed bottom-4 right-4 z-50"

// Minimized panel
className="fixed bottom-4 right-4 z-50 bg-card border rounded-lg shadow-xl"

// Full panel
className="fixed top-0 right-0 h-full w-80 md:w-96 bg-card border-l shadow-xl z-50"

// Minimize button (inside full panel)
className="text-sm opacity-70 hover:opacity-100 p-1 rounded hover:bg-muted relative z-10"
```

## User Experience Flow
1. **Initial State**: Chat button visible at bottom-right
2. **Open Chat**: Click button → Full panel opens on right side
3. **Minimize**: Click minimize button → Small floating panel
4. **Maximize**: Click maximize button → Full panel returns
5. **Close**: Click close button → Returns to initial state

## Critical Rules
- ✅ Use `isOpen && isMinimized` for minimized state
- ✅ Use `isOpen && !isMinimized` for full state
- ✅ Use `!isOpen` for closed state
- ✅ Maintain z-50 for all chat panels
- ✅ Add relative z-10 to minimize button
- ✅ Test all state transitions
- ✅ Ensure minimize button is clickable
- ✅ Preserve message history across state changes