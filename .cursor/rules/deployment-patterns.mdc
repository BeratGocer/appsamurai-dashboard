# Deployment Patterns

## Production Setup
- **Frontend**: Netlify (`https://ubiquitous-sherbet-b4f6bf.netlify.app`)
- **Backend**: Railway (`https://backend-production-80f6.up.railway.app`)
- **Database**: PostgreSQL (Railway managed)

## Build Process
1. **Frontend Build**: `npm run build` → `dist/` folder
2. **Backend Build**: `npm run build` → `dist/` folder
3. **Deploy Frontend**: `netlify deploy --prod --dir=dist`
4. **Deploy Backend**: Railway auto-deploys on git push

## Environment Configuration
- **Frontend**: Uses production backend URL in [src/utils/api.ts](mdc:src/utils/api.ts)
- **Backend**: Environment variables in Railway dashboard
- **Database**: Prisma migrations in [server/prisma/](mdc:server/prisma/)

## Key Files
- **Frontend Config**: [vite.config.ts](mdc:vite.config.ts), [tailwind.config.js](mdc:tailwind.config.js)
- **Backend Config**: [server/package.json](mdc:server/package.json), [server/prisma/schema.prisma](mdc:server/prisma/schema.prisma)
- **Deployment**: [vercel.json](mdc:vercel.json) (if using Vercel)

## Deployment Checklist
- [ ] Frontend builds successfully
- [ ] Backend builds successfully
- [ ] Database migrations run
- [ ] API endpoints respond correctly
- [ ] Frontend can connect to backend
- [ ] File upload works end-to-end
- [ ] Cross-device sync works

## Troubleshooting
- Check Railway logs for backend issues
- Verify API URL in frontend code
- Ensure CORS is configured correctly
- Test file upload and retrieval
