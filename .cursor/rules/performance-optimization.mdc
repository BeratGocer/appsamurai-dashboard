# Performance Optimization Guidelines

## React Performance
- **React.memo**: Use for expensive components
- **useMemo**: Memoize expensive calculations
- **useCallback**: Memoize event handlers
- **Lazy Loading**: Implement code splitting
- **Virtual Scrolling**: For large datasets

## Bundle Optimization
- **Tree Shaking**: Remove unused code
- **Code Splitting**: Split code into chunks
- **Dynamic Imports**: Use dynamic imports for large components
- **Bundle Analysis**: Regular bundle size analysis

## Data Processing
- **Pagination**: Implement pagination for large datasets
- **Filtering**: Efficient filtering algorithms
- **Caching**: Cache processed data
- **Debouncing**: Debounce search inputs

## CSV Processing Optimization
```typescript
// Optimized CSV processing
const processCSVOptimized = (csvData: string) => {
  // Use Web Workers for large files
  if (csvData.length > 1000000) {
    return new Promise((resolve) => {
      const worker = new Worker('/workers/csv-processor.js');
      worker.postMessage(csvData);
      worker.onmessage = (e) => resolve(e.data);
    });
  }
  
  // Process in chunks for large datasets
  const chunks = chunkData(csvData, 10000);
  return processChunks(chunks);
};
```

## Table Performance
- **Virtual Scrolling**: For large tables
- **Column Virtualization**: For wide tables
- **Row Virtualization**: For tall tables
- **Efficient Sorting**: Optimized sorting algorithms

## Memory Management
- **Cleanup**: Clean up event listeners
- **Memory Leaks**: Prevent memory leaks
- **Garbage Collection**: Optimize for GC
- **Object Pooling**: For frequently created objects

## Network Optimization
- **API Caching**: Cache API responses
- **Request Batching**: Batch multiple requests
- **Compression**: Use gzip compression
- **CDN**: Use CDN for static assets

## Image Optimization
- **Lazy Loading**: Lazy load images
- **Responsive Images**: Use appropriate image sizes
- **WebP Format**: Use modern image formats
- **Image Compression**: Compress images

## CSS Performance
- **Critical CSS**: Inline critical CSS
- **CSS Optimization**: Remove unused CSS
- **CSS-in-JS**: Optimize CSS-in-JS usage
- **Animation Performance**: Use transform/opacity

## JavaScript Performance
- **Event Delegation**: Use event delegation
- **Throttling**: Throttle frequent events
- **Debouncing**: Debounce search inputs
- **Web Workers**: Use workers for heavy tasks

## Database Performance
- **Indexing**: Proper database indexing
- **Query Optimization**: Optimize database queries
- **Connection Pooling**: Use connection pooling
- **Caching**: Implement database caching

## Monitoring & Metrics
- **Core Web Vitals**: Monitor Core Web Vitals
- **Performance Budgets**: Set performance budgets
- **Real User Monitoring**: Monitor real user performance
- **Error Tracking**: Track performance errors

## Optimization Checklist
- [ ] React components optimized
- [ ] Bundle size minimized
- [ ] Data processing optimized
- [ ] Table performance improved
- [ ] Memory leaks prevented
- [ ] Network requests optimized
- [ ] Images optimized
- [ ] CSS optimized
- [ ] JavaScript optimized
- [ ] Database queries optimized
- [ ] Performance monitored
description:
globs:
alwaysApply: true
---
