---
description: Data integrity debugging patterns for install count and ad network decoding issues
globs: src/utils/csvParser.ts,src/utils/kpiUtils.ts,src/components/Dashboard.tsx
---

# Data Integrity Debugging Patterns

## Core Principle
When CSV data shows different totals than system calculations, systematically debug the data flow to identify where data loss occurs.

## Common Data Integrity Issues

### 1. Install Count Discrepancies
**Symptoms**: CSV shows 70K installs, system shows 45K
**Root Causes**:
- Hidden tables filtering incorrectly applied
- Selected game filtering causing data loss
- Date range filtering excluding valid data
- CSV parsing errors or data duplication

### 2. Ad Network Decoding Issues
**Symptoms**: Campaign networks not decoded properly, showing as "Unknown"
**Root Causes**:
- Missing ad network mappings
- Incorrect parsing logic for new formats
- Case sensitivity issues in mappings

## Debugging Methodology

### Step 1: Verify CSV Data
```bash
# Count total installs in CSV
awk -F',' 'NR>1 {sum+=$5} END {print "Total installs:", sum}' file.csv

# Check for data duplication
awk -F',' 'NR>1 {key=$1","$2","$3","$4; count[key]++; sum[key]+=$5} END {for(k in count) if(count[k]>1) print k, "appears", count[k], "times"}' file.csv
```

### Step 2: Check System Calculations
```typescript
// Debug KPI calculations
console.log('Raw data length:', data.length);
console.log('Game groups length:', gameGroups.length);
console.log('Hidden tables:', Array.from(hiddenTables));
console.log('Selected game:', selectedGame);
```

### Step 3: Verify Filtering Logic
```typescript
// Test filtering step by step
const afterGameFilter = data.filter(row => row.app === selectedGame);
const afterHiddenFilter = afterGameFilter.filter(row => {
  const tableId = `${row.game}-${row.country}-${row.platform}-${row.publisher}`;
  return !hiddenTables.has(tableId);
});
console.log('After game filter:', afterGameFilter.length);
console.log('After hidden filter:', afterHiddenFilter.length);
```

## Data Flow Validation

### CSV → Parsed Data
- Verify all rows parsed correctly
- Check for parsing errors in console
- Validate column mappings

### Parsed Data → Game Groups
- Ensure all data included in groups
- Check group creation logic
- Verify daily data aggregation

### Game Groups → KPI Calculations
- Validate filtering logic
- Check for data loss in filtering
- Verify calculation methods

## Common Fixes

### Fix 1: Correct Filtering Order
```typescript
// ✅ CORRECT: Filter gameGroups first, then apply hiddenTables
if (hiddenTables && gameGroups) {
  gameGroups.forEach(group => {
    if (selectedGame && group.game !== selectedGame) return;
    if (!hiddenTables.has(tableId)) {
      visibleData.push(...group.dailyData);
    }
  });
}
```

### Fix 2: Handle Data Type Differences
```typescript
// ✅ CORRECT: Handle different data structures
if ('app' in row) {
  // Raw CampaignData
  return row.app === selectedGame;
} else {
  // dailyData from gameGroups (no app field)
  return true; // Already filtered at group level
}
```

## Testing Checklist
- [ ] CSV total matches expected value
- [ ] System total matches CSV total
- [ ] Hidden tables filtering works correctly
- [ ] Selected game filtering works correctly
- [ ] Combined filtering produces expected results
- [ ] No data loss in calculation pipeline

## File References
- CSV parsing: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- KPI calculations: [src/utils/kpiUtils.ts](mdc:src/utils/kpiUtils.ts)
- Dashboard integration: [src/components/Dashboard.tsx](mdc:src/components/Dashboard.tsx)