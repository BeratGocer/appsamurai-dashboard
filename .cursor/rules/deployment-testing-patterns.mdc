---
description: Deployment and testing patterns for production verification
---

# Deployment Testing Patterns

## Railway Deployment Workflow
1. **Code changes** → Git commit and push
2. **Railway auto-deploy** → Triggers on git push
3. **Database setup** → Ensure PostgreSQL database exists
4. **Environment variables** → Verify `DATABASE_URL` is set
5. **Migration execution** → Run Prisma migrations
6. **Service restart** → Restart backend if needed

## Testing Strategy
### Small File Testing First
```bash
# Create minimal test CSV
echo "gönderamkapp,campaign_network,adgroup_network,day,installs,ecpi,cost,all_revenue,roas_d0,roas_d1,roas_d2,roas_d3,roas_d4,roas_d5,roas_d6,roas_d7,roas_d14,roas_d21,roas_d30,roas_d45
Bus Frenzy,AppSa_BusFrenzy_iOS_US_CPE,SFT_MTkwMzZ8,2025-07-01,171,0.58,99.18,0,0,0,0,0,0,0,0,0,0,0,0,0" > test_small.csv

# Test with small file
curl -X POST "https://backend-production-80f6.up.railway.app/files/test-small/ingest" \
  -H "Content-Type: text/csv" \
  --data-binary @test_small.csv
```

### Production Testing
```bash
# Test with real CSV (after small file succeeds)
curl -X POST "https://backend-production-80f6.up.railway.app/files/test-real-csv/ingest" \
  -H "Content-Type: text/csv" \
  --data-binary @2025-9-5_10_50_adjust_report_export.csv
```

## Common Deployment Issues
### 502 Bad Gateway
- **Cause**: `DATABASE_URL` missing or backend not running
- **Solution**: Check Railway environment variables, restart service

### DB Insert Error
- **Cause**: Database tables don't exist (migrations not run)
- **Solution**: Run Prisma migrations, restart backend

### Timeout Errors
- **Cause**: Large CSV files (5000+ rows) exceed Railway timeout
- **Solution**: Test with smaller files first, optimize parsing

## Railway CLI Commands
```bash
# Login and link project
railway login
railway link

# Add PostgreSQL database
railway add --database postgres

# Check environment variables
railway variables

# Force deployment
railway up --detach

# View logs
railway logs --deployment
```

## Verification Steps
1. **Backend health**: `curl -I "https://backend-production-80f6.up.railway.app/"`
2. **Small file test**: Upload 5-row CSV
3. **Database verification**: Check inserted row count
4. **Large file test**: Upload full CSV (only after small file succeeds)
5. **Data integrity**: Verify install counts match CSV totals

## Error Response Patterns
```json
// Success
{"inserted":4,"skipped":0,"appended":false}

// Partial success
{"inserted":2,"skipped":2,"reason":"Invalid date at line 3","appended":false}

// Database error
{"inserted":0,"skipped":4,"reason":"DB insert error","appended":false}

// Row count mismatch
{"error":"csv_parse_error","message":"Expected 100 rows but parsed 95 rows. 5 rows skipped."}
```

## Best Practices
- Always test with small files before large uploads
- Monitor Railway logs for deployment issues
- Verify environment variables are set correctly
- Use Railway CLI for debugging and force deployments
- Implement comprehensive error logging and validation