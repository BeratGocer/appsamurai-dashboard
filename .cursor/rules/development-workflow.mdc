
# Development Workflow

## Project Setup
1. **Clone Repository**: Main dashboard project
2. **Install Dependencies**: `npm install` (frontend) + `cd server && npm install` (backend)
3. **Environment Setup**: Configure `.env` files for both frontend and backend
4. **Database Setup**: Run Prisma migrations

## Development Commands
### Frontend
- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run preview`: Preview production build

### Backend
- `npm run dev`: Start development server
- `npm run build`: Build TypeScript
- `railway up`: Deploy to Railway

## Code Organization
- **Frontend**: React components in `src/components/`
- **Backend**: Fastify server in `server/src/`
- **Types**: Shared types in `src/types/`
- **Utils**: Utility functions in `src/utils/`

## Git Workflow
- **Auto-commit**: Changes are automatically committed and pushed
- **Branch Strategy**: Main branch for production
- **Commit Messages**: Auto-generated with timestamps

## Testing Strategy
- **Frontend**: Manual testing via browser
- **Backend**: API endpoint testing
- **Chat Integration**: OpenAI API testing
- **Data Processing**: CSV parsing validation

## Debugging
- **Frontend**: Browser dev tools + console logs
- **Backend**: Railway logs + console output
- **API**: Network tab for request/response inspection
- **Database**: Prisma Studio for data inspection

## Performance Considerations
- **Lazy Loading**: Components loaded on demand
- **Data Pagination**: Large datasets handled efficiently
- **Caching**: API responses cached where appropriate
- **Optimization**: Bundle size optimization

## Security Practices
- **API Keys**: Stored in environment variables
- **CORS**: Configured for production domains
- **Input Validation**: CSV data validation
- **Error Handling**: Graceful error responses