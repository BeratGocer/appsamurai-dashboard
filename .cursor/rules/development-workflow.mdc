
# Development Workflow

## Project Structure
- **Frontend**: React + TypeScript + Vite in root directory
- **Backend**: Fastify + Prisma in `server/` directory
- **Database**: PostgreSQL with Prisma migrations

## Development Setup
```bash
# Install dependencies
pnpm install
cd server && pnpm install

# Start development servers
pnpm dev          # Frontend (Vite)
cd server && pnpm dev  # Backend (Fastify)
```

## Key Commands
- **Build**: `pnpm build` - Build frontend for production
- **Dev**: `pnpm dev` - Start development server
- **Backend**: `cd server && pnpm dev` - Start backend server
- **Database**: `cd server && pnpm prisma migrate dev` - Run migrations

## Deployment
- **Frontend**: Deployed to Netlify at `https://ubiquitous-sherbet-b4f6bf.netlify.app`
- **Backend**: Deployed to Railway/Cloudflare
- **Database**: PostgreSQL hosted on Railway

## File Upload Testing
1. **Test File**: Use `2025-9-4_9_57_adjust_report_export.csv`
2. **Customer**: "test müşteri" or "CrayzLabs"
3. **Manager**: "test Account Manager" or "Eylül"
4. **Expected**: Successful upload without "ingest failed" error

## Debugging Process
1. **Check Backend Logs**: Look for specific error messages
2. **Test API Endpoints**: Use curl or Postman
3. **Validate CSV Format**: Check headers and data structure
4. **Check Database**: Verify data insertion
5. **Frontend Console**: Look for JavaScript errors

## Common Issues
- **413 Error**: Increase `bodyLimit` in backend
- **500 Error**: Check CSV parsing and database constraints
- **File Reappearing**: Ensure proper state management
- **Empty Files**: Validate CSV data before processing

## Best Practices
- Always test with real CSV files
- Check server logs for errors
- Validate data at multiple levels
- Use TypeScript for type safety
- Implement proper error handling