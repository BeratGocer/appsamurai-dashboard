# State Management Patterns

## File State Management
- **Main State**: Managed in [App.tsx](mdc:src/App.tsx) with `useState`
- **File Operations**: Create, delete, select files
- **Backend Sync**: Always sync with backend API calls

## State Structure
```typescript
interface AppState {
  files: UploadedFile[];
  selectedFile: string | null;
  groups: Group[];
  customers: string[];
  accountManagers: string[];
  loading: boolean;
  error: string | null;
}
```

## File Lifecycle
1. **Upload**: Create file → Ingest data → Update state
2. **Select**: Update selectedFile → Load data → Update groups
3. **Delete**: Remove from backend → Update local state
4. **Refresh**: Load from backend → Sync state

## Data Flow
1. **File Upload**: [FileUpload.tsx](mdc:src/components/FileUpload.tsx) → [App.tsx](mdc:src/App.tsx)
2. **Data Processing**: [csvParser.ts](mdc:src/utils/csvParser.ts) → State
3. **Display**: State → [Dashboard.tsx](mdc:src/components/Dashboard.tsx)

## State Updates
- **File Operations**: Always call backend API first
- **Data Loading**: Use `useEffect` for initial load
- **Error Handling**: Set error state for user feedback
- **Loading States**: Show loading indicators during operations

## Best Practices
- Keep state minimal and derived
- Always validate data before state updates
- Handle loading and error states
- Use TypeScript for type safety
- Sync with backend for persistence
