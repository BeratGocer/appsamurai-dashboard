---
description: Ad network decoding update patterns and comprehensive mapping management
---

# Ad Network Decoding Update Patterns

## Overview
This rule covers the comprehensive update of ad network decoding mappings in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) based on [Adnetworkler.csv](mdc:Adnetworkler.csv) data.

## Mapping Categories

### S Network Mappings
Short codes starting with 'S' for direct ad network identification:
```typescript
const sNetworkMappings: Record<string, string> = {
  'SCR': 'Copper',
  'SPE': 'Prime', 
  'SFT': 'Fluent',
  'SDA': 'Dynata',
  'SAP': 'Ad it Up',
  'SKK': 'Klink',
  'STK': 'TNK',
  'SEA': 'Eneba',
  'TEST': 'Test',
  'SPL': 'Playwell',
  'SAN': 'AppsPrize',
  'SIE': 'Influence Mobile',
  'SAM': 'ATM',
  'SCE': 'Catbyte',
  'SEZ': 'Efez',
  'SJK': 'JumpTask API',
  'SWK': 'AppsPrize',
  'STR': 'TradeDoubler',
  'SBL': 'Buzzvil',
  'SAS': 'Ad for Us',
  'SMN': 'Mode Earn App',
  'SRY': 'Rewardy',
  'STS': 'TapChamps',
  'S2': 'Klink',
  'SAT': 'AppQwest',
  'SER': 'EmberFund',
  'Str': 'TradeDoubler'
};
```

### Base64 Mappings
Base64 encoded strings for various ad networks:
- AppsPrize codes (NTg1, NTk2, etc.)
- Catbyte codes (YjZkMjY1OWQ0ZjczNDZhZDliZWV8, etc.)
- Fyber codes (MTM1MTc0, MTIzNDUx, etc.)
- HangMyAds codes (OTEwXzExNJE3Mnx8, etc.)
- OfferToro codes (MTUwOTh8, MTYwMDh8, etc.)
- Lootably codes (Y2tkMmN3bzE4MDAwOWtnc2lkMGkxMWFrd3x8, etc.)

### PTSDK Mappings
PTSDK prefixed codes for AppsPrize network:
- PTSDK_H_* variants (PTSDK_H_NTg1, PTSDK_H_NTk2, etc.)
- PTSDK_* variants (PTSDK_NTg4, PTSDK_NzQ4, etc.)

## Update Process

### 1. Analysis Phase
- Read all codes from [Adnetworkler.csv](mdc:Adnetworkler.csv)
- Compare with existing mappings in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- Identify missing codes by category

### 2. Implementation Phase
- Add missing S network codes to `sNetworkMappings`
- Add missing Base64 codes to `base64Mappings`
- Add missing PTSDK codes to `ptsdkMappings`
- Use case-insensitive `findMapping()` function for all lookups

### 3. Validation Phase
- Create [tanımlı.csv](mdc:tanımlı.csv) with all defined codes
- Verify all Adnetworkler.csv codes are covered
- Test decoding functionality
- Fix any linter errors (duplicate properties, etc.)

## Critical Rules
- ✅ Always use case-insensitive mapping functions
- ✅ Maintain existing prefix/suffix pattern matching
- ✅ Preserve all existing functionality
- ✅ Handle duplicate codes gracefully
- ✅ Create comprehensive documentation file
- ✅ Test all new mappings thoroughly

## File References
- Source data: [Adnetworkler.csv](mdc:Adnetworkler.csv)
- Implementation: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- Documentation: [tanımlı.csv](mdc:tanımlı.csv)

## Pattern Matching Logic
The decodeAdNetwork function uses multiple strategies:
1. Direct mapping lookup (case-insensitive)
2. Prefix matching for S networks
3. Suffix matching for S networks  
4. PTSDK prefix detection
5. Base64 pattern recognition
6. Special case handling (UFVCL, comma-separated codes)

## Error Prevention
- Check for duplicate properties in mappings
- Validate all new codes before adding
- Maintain alphabetical ordering where possible
- Use consistent naming conventions
- Handle edge cases (empty codes, special characters)