# Table Column Management

## Column Visibility System
Reference: [src/components/SettingsPanel.tsx](mdc:src/components/SettingsPanel.tsx)

```tsx
// Column visibility management
const handleColumnToggle = (column: string) => {
  const currentColumns = settings.visibleColumns || ['installs', 'roas_d0', 'roas_d7'];
  const newColumns = currentColumns.includes(column)
    ? currentColumns.filter(col => col !== column)
    : [...currentColumns, column];
  
  onSettingsChange({
    ...settings,
    visibleColumns: newColumns,
  });
};
```

## Default Visible Columns
```tsx
// Default columns to show
const defaultVisibleColumns = ['installs', 'roas_d0', 'roas_d7'];

// Available columns from CSV data
const availableColumns = data.length > 0 ? Object.keys(data[0]).filter(key => 
  key.startsWith('roas_') || key.startsWith('retention_rate_') || 
  ['installs', 'ecpi', 'adjust_cost', 'ad_revenue', 'gross_profit'].includes(key)
) : [];
```

## Column Label Mapping
Always use consistent Turkish labels:

```tsx
const getColumnLabel = (column: string): string => {
  const columnLabels: Record<string, string> = {
    installs: 'Install',
    roas_d0: 'ROAS D0',
    roas_d1: 'ROAS D1',
    roas_d2: 'ROAS D2',
    roas_d3: 'ROAS D3',
    roas_d4: 'ROAS D4',
    roas_d5: 'ROAS D5',
    roas_d6: 'ROAS D6',
    roas_d7: 'ROAS D7',
    roas_d14: 'ROAS D14',
    roas_d21: 'ROAS D21',
    roas_d30: 'ROAS D30',
    roas_d45: 'ROAS D45',
    roas_d60: 'ROAS D60',
    retention_rate_d1: 'Retention D1',
    retention_rate_d7: 'Retention D7',
    retention_rate_d14: 'Retention D14',
    retention_rate_d30: 'Retention D30',
    ecpi: 'eCPI',
    adjust_cost: 'Maliyet',
    ad_revenue: 'Gelir',
    gross_profit: 'Kar',
  };
  return columnLabels[column] || column;
};
```

## Table Column Rendering
Reference: [src/components/GameTables.tsx](mdc:src/components/GameTables.tsx)

```tsx
// Table header with dynamic columns
<TableHeader>
  <TableRow>
    <TableHead className="text-center table-header-fixed px-3 whitespace-nowrap min-w-[80px]">
      Tarih
    </TableHead>
    {visibleColumns.map(column => (
      <TableHead key={column} className="text-center table-header-fixed px-3 whitespace-nowrap min-w-[85px]">
        {getColumnLabel(column)}
      </TableHead>
    ))}
  </TableRow>
</TableHeader>

// Table body with dynamic columns
<TableBody>
  {group.dailyData.map((dayData, dayIndex) => (
    <TableRow key={dayIndex}>
      <TableCell className="font-medium table-cell-fixed text-center py-2 px-3 whitespace-nowrap min-w-[80px]">
        {formatDate(dayData.date)}
      </TableCell>
      {visibleColumns.map(column => {
        const value = (dayData as any)[column];
        const isROAS = column.startsWith('roas_') || column.startsWith('retention_rate_');
        const formattedValue = isROAS ? formatROAS(value || 0) : 
                             typeof value === 'number' ? value.toLocaleString() : 
                             value || '0';
        
        return (
          <TableCell key={column} className="font-mono table-cell-fixed text-center py-2 px-3 whitespace-nowrap min-w-[85px]">
            <span style={getCellStyle(value || 0, column)}>
              {formattedValue}
            </span>
          </TableCell>
        );
      })}
    </TableRow>
  ))}
</TableBody>
```

## Dynamic Table Width
Calculate table width based on visible columns:

```tsx
// Table container width formula
const tableWidth = Math.max(400, 100 + (visibleColumns.length * 95));

// Individual column minimum widths
const columnMinWidths = {
  dateColumn: 'min-w-[80px]',
  dataColumn: 'min-w-[85px]'
};
```

## Column Toggle UI
```tsx
<div className="grid grid-cols-2 md:grid-cols-3 gap-1">
  {availableColumns.map((column) => {
    const isVisible = (settings.visibleColumns || defaultVisibleColumns).includes(column);
    return (
      <div
        key={column}
        className={`flex items-center justify-between p-2 border rounded cursor-pointer transition-colors text-sm ${
          isVisible ? 'bg-primary/10 border-primary' : 'bg-muted/20 hover:bg-muted/30'
        }`}
        onClick={() => handleColumnToggle(column)}
      >
        <span className="text-xs font-medium">{getColumnLabel(column)}</span>
        {isVisible ? (
          <Eye className="h-3 w-3 text-primary" />
        ) : (
          <EyeOff className="h-3 w-3 text-muted-foreground" />
        )}
      </div>
    );
  })}
</div>
```

## Critical Requirements
- ✅ Always define `getColumnLabel()` function
- ✅ Use dynamic column filtering based on CSV data
- ✅ Support per-file column visibility persistence
- ✅ Calculate table width dynamically
- ✅ Use consistent column labels across components
- ✅ Handle missing column data gracefully
description:
globs:
alwaysApply: true
---
