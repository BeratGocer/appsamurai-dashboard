---
description: CSV data handling and parsing patterns for campaign data
---

# CSV Data Handling Patterns

## Core CSV Parser
The main CSV parsing logic is in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) using the `parseCSV()` function.

## Header Handling
- **No Headers**: CSV files never include headers - first row is treated as data
- **Corrupted Headers**: Handle corrupted headers like 'm app,' or 'gönder app,'
- **Flexible Column Matching**: Use `getColumnIndex()` for flexible column name matching

## Data Format Detection
```typescript
const isDetailedFormat = headers.includes('ecpi') && headers.includes('adjust_cost');
const isAzulaFormat = headers.includes('all_revenue') && !headers.includes('app');
const isBusFrenzyFormat = headers.includes('all_revenue') && headers.includes('cost') && headers.includes('roas_d0');
```

## Campaign Network Parsing
Use `parseCampaignNetwork()` function to extract:
- Platform (Android/iOS)
- Country (ISO codes)
- Ad Network (decoded from codes)
- Campaign Type, Event Type, Publisher
- Creative Format, Targeting, Audience

## Data Types
```typescript
interface CampaignData {
  app: string;
  installs: number;
  campaign_network: string;
  adgroup_network: string;
  country: string;
  platform: string;
  date: string;
  roas_d0: number;
  roas_d7: number;
  roas_d30: number;
}
```

## Critical Rules
- ✅ Never assume CSV has headers
- ✅ Handle corrupted first lines gracefully
- ✅ Use flexible column matching for different formats
- ✅ Parse campaign_network strings to extract structured data
- ✅ Validate numeric fields (installs, ROAS values)
- ✅ Handle missing or malformed data gracefully