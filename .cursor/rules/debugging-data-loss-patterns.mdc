---
description: Systematic debugging patterns for data loss issues
---

# Debugging Data Loss Patterns

## Systematic Approach to Data Loss Issues
When install counts drop or data disappears after page refresh, follow this systematic debugging approach.

### Step 1: Verify CSV Content
```typescript
// Check original CSV file
const csvContent = await fetch('path/to/csv').then(r => r.text());
const lines = csvContent.split('\n');
const totalInstalls = lines.slice(1).reduce((sum, line) => {
  const installs = line.split(',')[1]; // Assuming installs is column 1
  return sum + Number(installs || 0);
}, 0);
console.log('CSV total installs:', totalInstalls);
```

### Step 2: Check Frontend Parsing
```typescript
// Verify frontend parsing results
const parsedData = parseCSV(csvContent);
const frontendTotal = parsedData.reduce((sum, row) => sum + Number(row.installs || 0), 0);
console.log('Frontend parsed installs:', frontendTotal);
```

### Step 3: Check localStorage Data
```typescript
// Verify localStorage contains correct data
const files = JSON.parse(localStorage.getItem('appsamurai-uploaded-files'));
const localStorageFile = files.find(f => f.name === 'filename.csv');
const localStorageTotal = localStorageFile.data.reduce((sum, row) => sum + Number(row.installs || 0), 0);
console.log('localStorage installs:', localStorageTotal);
```

### Step 4: Check Backend Data
```typescript
// Verify backend ingestion results
const backendResponse = await fetch('/api/files/active/groups');
const backendData = await backendResponse.json();
const backendTotal = backendData.reduce((sum, group) => {
  return sum + group.dailyData.reduce((groupSum, day) => groupSum + Number(day.installs || 0), 0);
}, 0);
console.log('Backend installs:', backendTotal);
```

## Common Data Loss Scenarios

### Scenario 1: Frontend Parsing Issues
**Symptoms**: Initial load shows wrong count
**Debug**: Check CSV header parsing and column mapping
**Solution**: Fix corrupted header handling

### Scenario 2: Backend Double Processing
**Symptoms**: Count drops after refresh, data appears decoded but missing
**Debug**: Check if backend re-processes already decoded data
**Solution**: Remove redundant decoding in grouped endpoint

### Scenario 3: localStorage Priority Issues
**Symptoms**: Count drops after refresh, localStorage has correct data
**Debug**: Check Dashboard component data loading logic
**Solution**: Prioritize localStorage data over backend data

### Scenario 4: ID Mismatch Issues
**Symptoms**: localStorage data not found after refresh
**Debug**: Check file ID consistency between localStorage and backend
**Solution**: Use filename matching as fallback

## Debugging Checklist
- ✅ **CSV Content**: Verify original file has expected data
- ✅ **Frontend Parsing**: Check parseCSV function results
- ✅ **localStorage**: Verify data is stored correctly
- ✅ **Backend Ingestion**: Check server processing
- ✅ **Data Loading**: Verify Dashboard component logic
- ✅ **ID Consistency**: Check file ID matching
- ✅ **Page Refresh**: Test persistence after F5

## Testing Commands
```bash
# Check browser console for data
console.log('Active file ID:', localStorage.getItem('appsamurai-active-file-id'));
console.log('localStorage files:', JSON.parse(localStorage.getItem('appsamurai-uploaded-files')));

# Verify install counts at each step
# 1. CSV: Count rows manually or with script
# 2. Frontend: Check parsed data length and sum
# 3. localStorage: Check stored data
# 4. Backend: Check API response
# 5. Dashboard: Check displayed count
```

## File Locations
- Dashboard Component: [src/components/Dashboard.tsx](mdc:src/components/Dashboard.tsx)
- CSV Parser: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- Backend API: [server/src/index.ts](mdc:server/src/index.ts)