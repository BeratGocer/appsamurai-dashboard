---
description: Systematic debugging patterns for data loss issues
alwaysApply: false
---

# Systematic Debugging Patterns for Data Loss Issues

## Data Loss Investigation Framework

### 1. Source Data Verification
```bash
# Always verify source CSV first
awk -F',' 'NR>1 {sum+=$5} END {print "Total installs:", sum}' filename.csv
wc -l filename.csv  # Count total rows
```

### 2. Backend Data Integrity Check
```bash
# Check backend health
curl -s https://backend-production-80f6.up.railway.app/health

# Verify file groups endpoint returns complete data
curl -s https://backend-production-80f6.up.railway.app/files/{fileId}/groups | jq '.[] | .byDate | map(.installs) | add'

# Check database schema
curl -s https://backend-production-80f6.up.railway.app/debug/schema
```

### 3. Frontend Data Flow Tracing
```typescript
// Add console.log statements to trace data flow
console.log('Raw data length:', data.length);
console.log('Total installs in raw data:', data.reduce((sum, row) => sum + row.installs, 0));

// Check filtered data
console.log('Filtered data length:', filteredData.length);
console.log('Total installs in filtered data:', filteredData.reduce((sum, row) => sum + row.installs, 0));

// Check game groups
console.log('Game groups length:', gameGroups.length);
console.log('Total installs in game groups:', gameGroups.reduce((sum, group) => 
  sum + group.dailyData.reduce((groupSum, day) => groupSum + day.installs, 0), 0));
```

### 4. Data Processing Pipeline Debugging
```typescript
// In csvParser.ts - add logging to getGameCountryPublisherGroups
export function getGameCountryPublisherGroups(data: CampaignData[]): GameCountryPublisherGroup[] {
  console.log('Input data length:', data.length);
  console.log('Input total installs:', data.reduce((sum, row) => sum + row.installs, 0));
  
  // ... processing logic ...
  
  console.log('Output groups length:', groups.size);
  console.log('Output total installs:', Array.from(groups.values()).reduce((sum, group) => 
    sum + group.dailyData.reduce((groupSum, day) => groupSum + day.installs, 0), 0));
  
  return Array.from(groups.values());
}
```

### 5. KPI Calculation Debugging
```typescript
// In kpiUtils.ts - add logging to calculateKPIValue
export function calculateKPIValue(data: CampaignData[], config: KPICardConfig, ...): KPIValue {
  console.log('KPI calculation - Column:', config.column);
  console.log('KPI calculation - Input data length:', data.length);
  console.log('KPI calculation - Input total installs:', data.reduce((sum, row) => sum + row.installs, 0));
  
  // ... calculation logic ...
  
  console.log('KPI calculation - Result:', rawValue);
  return { raw: rawValue, formatted: formatKPIValue(rawValue, config.format, config.decimalPlaces) };
}
```

## Common Data Loss Scenarios

### Scenario 1: Backend Incomplete Processing
- **Symptom**: Install count drops after refresh
- **Cause**: Backend skipping rows during ingest
- **Debug**: Check backend logs for skipped rows
- **Fix**: Improve backend error handling

### Scenario 2: Frontend Aggregation Issues
- **Symptom**: Data shows correctly initially, drops after processing
- **Cause**: Frontend grouping/aggregation logic
- **Debug**: Check `getGameCountryPublisherGroups` function
- **Fix**: Verify data merging logic

### Scenario 3: Filtering Logic Problems
- **Symptom**: Data varies based on settings
- **Cause**: Date range or game filtering
- **Debug**: Check `filteredData` calculation
- **Fix**: Ensure KPI calculations use unfiltered data

### Scenario 4: Data Type Conversion Issues
- **Symptom**: Numbers become strings or NaN
- **Cause**: CSV parsing or data conversion
- **Debug**: Check data types in console
- **Fix**: Ensure proper number parsing

## Debugging Checklist
- [ ] Verify source CSV data integrity
- [ ] Check backend data storage
- [ ] Trace frontend data flow
- [ ] Verify data processing pipeline
- [ ] Check KPI calculation logic
- [ ] Test with different data sets
- [ ] Monitor browser console for errors
- [ ] Check network requests in DevTools

## Files to Monitor During Debugging
- [src/components/Dashboard.tsx](mdc:src/components/Dashboard.tsx) - Main data loading
- [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) - Data processing
- [src/utils/kpiUtils.ts](mdc:src/utils/kpiUtils.ts) - KPI calculations
- [server/src/index.ts](mdc:server/src/index.ts) - Backend processing
- [2025-9-5_10_50_adjust_report_export.csv](mdc:2025-9-5_10_50_adjust_report_export.csv) - Source data

## Critical Functions to Debug
- `parseCSV()` - CSV parsing logic
- `getGameCountryPublisherGroups()` - Data aggregation
- `calculateKPIValue()` - KPI calculations
- Backend ingest endpoint - Data storage
- Frontend data loading - Data retrieval