
# Dashboard Integration Patterns

## KPI Visibility Rules
Reference: [src/components/Dashboard.tsx](mdc:src/components/Dashboard.tsx)

- Render KPI settings and cards only when `currentTab === 'overview'`
- Gate the entire KPI block with tab condition
- Editing state (`kpiEditMode`) must be local to the overview section

```tsx
{currentTab === 'overview' && (
  <div className="space-y-4">
    <div className="flex items-center justify-between">
      <div className="flex items-center gap-2">
        <h2 className="text-lg font-semibold">Key Metrics</h2>
        {activeFileId && (
          <span className="text-sm text-muted-foreground">
            ({uploadedFiles.find(f => f.id === activeFileId)?.name})
          </span>
        )}
      </div>
      <Button
        variant="outline"
        size="sm"
        onClick={() => setKpiEditMode(!kpiEditMode)}
        className="flex items-center gap-2"
      >
        <Edit3 className="h-4 w-4" />
        {kpiEditMode ? 'Exit Edit Mode' : 'Edit KPI Cards'}
      </Button>
    </div>

    <DynamicKPISection
      data={filteredData}
      activeFileId={activeFileId}
      hiddenTables={hiddenTables}
      gameGroups={gameGroups}
      isEditMode={kpiEditMode}
      onEditModeToggle={() => setKpiEditMode(!kpiEditMode)}
    />
  </div>
)}
```

## Settings Panel Integration
Settings panel should only show in overview tab:

```tsx
{/* Settings Panel - Only show in overview tab */}
{currentTab === 'overview' && (
  <SettingsPanel
    settings={settings}
    onSettingsChange={handleSettingsChange}
    isOpen={showSettings}
    onToggle={() => setShowSettings(!showSettings)}
    hiddenTables={Array.from(hiddenTables).map(tableId => {
      const parts = tableId.split('-');
      const publisher = parts.slice(3).join('-');
      return {
        id: tableId,
        game: parts[0],
        country: parts[1],
        platform: parts[2],
        publisher: publisher
      };
    })}
    onTableVisibilityChange={handleTableVisibilityChange}
    availableColumns={data.length > 0 ? Object.keys(data[0]).filter(key => 
      key.startsWith('roas_') || key.startsWith('retention_rate_') || 
      ['installs', 'ecpi', 'adjust_cost', 'ad_revenue', 'gross_profit'].includes(key)
    ) : []}
  />
)}
```

## Game Filtering Integration
Support game-specific filtering in dashboard:

```tsx
// Game filter info - Show if a specific game is selected
{selectedGame && (
  <div className="bg-blue-50 dark:bg-blue-950/30 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
    <div className="flex items-center justify-between">
      <div>
        <h4 className="font-medium text-blue-900 dark:text-blue-100">
          Viewing Game: {selectedGame}
        </h4>
        <p className="text-sm text-blue-700 dark:text-blue-300">
          Dashboard is filtered to show only data for this game
        </p>
      </div>
      <Button
        variant="outline"
        size="sm"
        onClick={() => setSelectedGame(null)}
        className="text-blue-700 dark:text-blue-300 border-blue-300"
      >
        Show All Games
      </Button>
    </div>
  </div>
)}
```

## Table Integration with Settings
Pass settings to table components:

```tsx
<GameTables 
  groups={gameGroups} 
  conditionalRules={settings.conditionalRules.filter(rule => rule.isActive)}
  hiddenTables={hiddenTables}
  onTableVisibilityChange={handleTableVisibilityChange}
  onBulkHide={handleBulkHide}
  onBulkShow={handleBulkShow}
  visibleColumns={settings.visibleColumns || ['installs', 'roas_d0', 'roas_d7']}
/>
```

## File Management Integration
Handle file selection and navigation:

```tsx
// Navigate to dashboard with specific game filter
const handleGameSelect = (fileId: string, gameName?: string) => {
  onFileSelect(fileId);
  if (gameName) {
    setSelectedGame(gameName);
  } else {
    setSelectedGame(null);
  }
  setCurrentTab('overview');
};
```

## Data Filtering Integration
Apply date range and game filtering:

```tsx
// Filter data based on date range and selected game
const filteredData = data.filter((row) => {
  // Date filtering
  if (settings.dateRange.startDate && settings.dateRange.endDate) {
    const rowDate = new Date(row.day);
    const startDate = new Date(settings.dateRange.startDate);
    const endDate = new Date(settings.dateRange.endDate);
    
    if (!(rowDate >= startDate && rowDate <= endDate)) {
      return false;
    }
  }
  
  // Game filtering - if a specific game is selected, only show that game's data
  if (selectedGame) {
    const gameNameFromRow = row.app.replace(' Android', '').replace(' iOS', '').trim();
    return gameNameFromRow === selectedGame;
  }
  
  return true;
});
```

## Critical Requirements
- ✅ Gate KPI components with `currentTab === 'overview'`
- ✅ Pass settings to table components
- ✅ Support game-specific filtering
- ✅ Apply date range filtering
- ✅ Handle file selection and navigation
- ✅ Maintain per-file settings persistence

- KPI calculation: Return 0 for invalid/hidden data
- Game filtering: Handle missing/malformed game names
- Navigation: Validate file/game existence before navigation