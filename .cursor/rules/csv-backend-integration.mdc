---
description: Backend API, merge logic, data contracts, and deployment standards for AppSamurai Dashboard
---
# Backend Integration Rule

## Goals
- CSV verilerini ve dosya ayarlarını kalıcı tutmak
- "Güncelle / Yeni Dosya" akışını desteklemek (benzer kampanya tespiti + merge)
- FE ile aynı mantığı servis etmek: tarih senkronizasyonu, grup yapısı, yüzdelikler FE’de formatlanır

## Teknoloji ve Güvenlik
- Runtime: Node.js + TypeScript + Express
- DB: PostgreSQL (Railway)
- Auth: `x-api-key` zorunlu (sabit API key)
- CORS: yalnızca Netlify prod alanı `https://ubiquitous-sherbet-b4f6bf.netlify.app`
- Logging: pino

## Veri Modeli (özet)
- files: id, name, size, uploaded_at, campaign_id, structure_hash, deleted_at
- file_settings: file_id, hidden_tables, kpi_config, column_visibility, date_range, platform_country_order
- campaign_rows: file_id, app, campaign_network, adgroup_network, country, platform, date, installs, ecpi, cost, all_revenue, roas_d0..roas_d45
  - unique index: (file_id, app, campaign_network, adgroup_network, date)

## Parsing ve Kurallar
- Flexible CSV parsing (header varyasyonları desteklenir)
- Adnetwork/publisher decoding konservatif; emin olunmayan değerler orijinal kalır
- Game name `row.app` üzerinden çıkarılır
- ROAS değerleri DB’de decimal; yüzde format FE’de

## Merge Stratejisi
- Merge key: `${app}-${campaign_network}-${adgroup_network}-${date}-${file_id}`
- Aynı anahtar: replace; yeni anahtar: insert
- Aggregation sorgu zamanında:
  - Installs/cost/revenue sum
  - ROAS/retention install-weighted average
- Benzer kampanya tespiti: `generateCampaignId` (oyun+ülke kümeleri, sıralı ve deterministik) + >%50 oyun örtüşmesi ikincil kontrol

## Tarih Senkronizasyonu
- Dönen veride tarih aralığı tam doldurulmalı (eksik günler 0 ile)
- Artan tarih sıralaması (ör: `GameTables.tsx`)

## API Sözleşmeleri

### Upload & Confirm
- POST `/api/files/upload` (multipart `file`)
```json
{
  "temp_file_ref": "string",
  "detected": { "campaign_id": "string", "matching_file_id": "uuid|null" },
  "preview": { "columns": ["col1"], "sampleRows": [ {} ] }
}
```
- POST `/api/files/confirm`
```json
{ "temp_file_ref": "string", "mode": "update"|"new", "target_file_id": "uuid|null" }
```
→ `{ "file_id": "uuid" }`

### Files & Settings
- GET `/api/files` → liste
- GET `/api/files/:id` → meta + preview
- PATCH `/api/files/:id/settings`
```json
{
  "hidden_tables": ["publisherKey"],
  "kpi_config": {},
  "column_visibility": ["installs","roas_d7"],
  "date_range": { "start": "YYYY-MM-DD", "end": "YYYY-MM-DD" },
  "platform_country_order": ["Android-US","iOS-TR"]
}
```

### Data
- GET `/api/data/overview` (query: `file_id`, `selected_game?`, `hidden_tables?`, `start_date?`, `end_date?`)
```json
{
  "kpis": { "total_installs": 0, "avg_roas_d0": 0, "avg_roas_d7": 0, "avg_roas_d30": 0 },
  "date_range": { "start": "YYYY-MM-DD", "end": "YYYY-MM-DD" }
}
```
- GET `/api/data/tables` (query: `file_id`, filtreler, tarih aralığı)
```json
{
  "groups": [
    {
      "game": "ColorJelly",
      "country": "US",
      "platform": "Android",
      "publisher": "TBSDK",
      "dailyData": [ { "date": "2025-01-01", "installs": 123, "roas_d7": 0.35, "roas_d30": 0.72 } ]
    }
  ],
  "date_range": { "start": "YYYY-MM-DD", "end": "YYYY-MM-DD" }
}
```

### Health
- GET `/api/health` → `{ "status": "ok" }`

## Performans
- Upsert: `ON CONFLICT` unique index ile
- Büyük yüklemeler: batch insert/staging
- Indexler: `(file_id, app, country, platform, date)` ve unique anahtar

## Branch ve Dağıtım
- Backend repo: private, iki branch: `product` (prod), `developer` (dev)
- Railway servisleri: prod→product, dev→developer
- Env vars: `API_KEY`, `CORS_ORIGINS=https://ubiquitous-sherbet-b4f6bf.netlify.app`, `DATABASE_URL`

## Frontend Hizalama
- Yüzde format FE’de
- Grup: APP+COUNTRY+PLATFORM, publisher’lar yan yana
- Tarih artan; eksik günler 0

---
description: CSV backend integration patterns and requirements
---

# CSV Backend Integration Rules

## CSV File Structure
CSV files in this project do NOT have column headers. All rows including the first row contain data.

### Required CSV Columns (20 total)
1. `gönder app` (Column 0)
2. `campaign_network` (Column 1)
3. `adgroup_network` (Column 2)
4. `day` (Column 3)
5. `installs` (Column 4)
6. `ecpi` (Column 5)
7. `cost` (Column 6)
8. `all_revenue` (Column 7)
9. `roas_d0` (Column 8)
10. `roas_d1` (Column 9)
11. `roas_d2` (Column 10)
12. `roas_d3` (Column 11)
13. `roas_d4` (Column 12)
14. `roas_d5` (Column 13)
15. `roas_d6` (Column 14)
16. `roas_d7` (Column 15)
17. `roas_d14` (Column 16)
18. `roas_d21` (Column 17)
19. `roas_d30` (Column 18)
20. `roas_d45` (Column 19)

## Backend Implementation Patterns

### CSV Parsing
```typescript
// Use hardcoded column indices - NO HEADER PARSING
const iApp = 0      // gönder app
const iCN = 1       // campaign_network
const iAN = 2       // adgroup_network
const iDay = 3      // day
const iInst = 4     // installs
const iEcpi = 5     // ecpi
const iCost = 6     // cost
const iRev = 7      // all_revenue
const iD0 = 8       // roas_d0
// ... etc

// Process ALL rows including first row
for (let li = 0; li < lines.length; li++) {
  // Process each row as data
}
```

### Database Schema
All ROAS columns must be present in [server/prisma/schema.prisma](mdc:server/prisma/schema.prisma):
```prisma
model CampaignRow {
  // ... other fields
  roas_d0         Decimal? @db.Decimal(20,10)
  roas_d1         Decimal? @db.Decimal(20,10)
  roas_d2         Decimal? @db.Decimal(20,10)
  roas_d3         Decimal? @db.Decimal(20,10)
  roas_d4         Decimal? @db.Decimal(20,10)
  roas_d5         Decimal? @db.Decimal(20,10)
  roas_d6         Decimal? @db.Decimal(20,10)
  roas_d7         Decimal? @db.Decimal(20,10)
  roas_d14        Decimal? @db.Decimal(20,10)
  roas_d21        Decimal? @db.Decimal(20,10)
  roas_d30        Decimal? @db.Decimal(20,10)
  roas_d45        Decimal? @db.Decimal(20,10)
}
```

### Field Mapping
CSV column names map to backend field names:
- `gönder app` → `app`
- `cost` → `adjustCost`
- `all_revenue` → `adRevenue`
- `campaign_network` → `campaignNetwork`
- `adgroup_network` → `adgroupNetwork`

## Critical Rules
- ✅ Never parse first row as headers
- ✅ Use hardcoded column indices (0, 1, 2, 3...)
- ✅ Process all rows as data including first row
- ✅ Ensure all 20 ROAS columns exist in database
- ✅ Run migrations when adding new columns
- ✅ Test with `/debug/schema` endpoint after schema changes