---
description: Ad network decoding implementation patterns and troubleshooting
---

# Ad Network Decoding Patterns

## Core Architecture
The ad network decoding system is implemented in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) using the `decodeAdNetwork()` function.

## Decoding Hierarchy
1. **S Network Codes**: Direct mapping for codes starting with 'S' (SCR, SPE, SFT, etc.)
2. **Base64 Mappings**: Direct mapping for specific Base64 encoded strings
3. **PTSDK Codes**: Pattern-based recognition for PTSDK_H_ and PTSDK_ prefixes
4. **Fluent Patterns**: Comprehensive number-based patterns for Fluent ad network
5. **OfferToro Patterns**: Base64 number + pipe format recognition
6. **Lootably Patterns**: Y2-prefixed long Base64 strings

## Fluent Ad Network Rules
Fluent supports multiple number-based patterns:
- `34631_` → Fluent (number + underscore)
- `34631_5406` → Fluent (number + underscore + number)
- `34631_dshop` → Fluent (number + underscore + text)
- `34631_13821-207475-youtube` → Fluent (complex format)
- `45209_BM-207288` → Fluent (BM/PSP format)
- `45209_reward-205771` → Fluent (reward format)
- `206305` → Fluent (numbers only)
- `34631_ 206305` → Fluent (spaced format, auto-cleaned)

## Pattern Implementation
```typescript
// Spaced format cleaning
if (/^\d+_\s+\d+$/.test(cleanCode)) {
  const cleanedCode = cleanCode.replace(/\s+/g, '');
  if (/^\d+_\d+$/.test(cleanedCode)) {
    return 'Fluent';
  }
}

// Lootably pattern
if (/^Y2[a-zA-Z0-9]{30,}x8$/.test(cleanCode)) {
  return 'Lootably';
}

// OfferToro pattern
if (/^[A-Za-z0-9]+8$/.test(cleanCode) && cleanCode.length <= 10) {
  return 'OfferToro';
}
```

## Critical Rules
- ✅ Always test new patterns with actual CSV data
- ✅ Use flexible regex patterns, not hardcoded positions
- ✅ Handle spaced formats by cleaning whitespace
- ✅ Maintain pattern hierarchy (specific patterns first)
- ✅ Add new networks to base64Mappings for direct lookup
- ✅ Use pattern rules for recurring formats