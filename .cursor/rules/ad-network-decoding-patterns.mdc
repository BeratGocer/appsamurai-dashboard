---
description: Ad network decoding implementation patterns and troubleshooting
---

# Ad Network Decoding Patterns

## Core Decoding Strategy
The system uses [Adnetworks.csv](mdc:Adnetworks.csv) as the source of truth for ad network mappings and implements intelligent pattern recognition.

## S-Pattern Recognition
For ad networks starting with 'S', the system recognizes the pattern:
- **S** + **middle letter** + **last letter** = **adnetwork name**
- Examples:
  - `SCE` = **S** + **C** + **E** = **Catbyte**
  - `SPE` = **S** + **P** + **E** = **Prime** 
  - `SFT` = **S** + **F** + **T** = **Fluent**

## Implementation in csvParser.ts
The decoding logic is implemented in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) in the `decodeAdNetwork` function:

```typescript
// Ad network mapping from Adnetworks.csv
const adNetworkMap: Record<string, string> = {
  // S-pattern codes
  'SCE': 'Catbyte',
  'SPE': 'Prime', 
  'SFT': 'Fluent',
  
  // Direct mappings
  'SAM': 'ATM',
  'Zm': 'catbyte',
  'ZT': 'catbyte', 
  'Zj': 'catbyte',
  'YW': 'catbyte',
  'ZG5BU2hhUEFyeEE0': 'EmberFund'
};
```

## Special Case Handling
The system includes special case handling for prefixes:

```typescript
// Special case: SFT_ prefix should always map to Fluent
if (cleanCode.startsWith('SFT_')) {
  return 'Fluent';
}

// Special case: SIE_ prefix should always map to Influence Mobile  
if (cleanCode.startsWith('SIE_')) {
  return 'Influence Mobile';
}
```

## Base64 Decoding
For Base64 encoded values, the system attempts decoding:

```typescript
// Try base64 decoding only for clear base64 patterns
if (adgroupNetwork.length > 8 && /^[A-Za-z0-9+/]+=*$/.test(adgroupNetwork)) {
  try {
    const decoded = atob(adgroupNetwork);
    if (decoded && decoded.length > 0 && /^[a-zA-Z0-9\s\-_.]+$/.test(decoded)) {
      return decoded;
    }
  } catch {
    // Base64 decode failed, keep original
  }
}
```

## Critical Rules
- ✅ Always update [Adnetworks.csv](mdc:Adnetworks.csv) first when adding new mappings
- ✅ Add mappings to both CSV file and `adNetworkMap` in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- ✅ Test new patterns with actual CSV data before deployment
- ✅ Keep unrecognized codes as-is (don't force decode unknown patterns)
- ✅ Use S-pattern recognition for networks starting with 'S'
- ✅ Handle special prefixes with dedicated logic
- ✅ Validate Base64 patterns before attempting decode

## Troubleshooting
When ad networks show as "Unknown":
1. Check if the code exists in [Adnetworks.csv](mdc:Adnetworks.csv)
2. Verify the mapping is added to `adNetworkMap` in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
3. Test the S-pattern recognition logic
4. Check for special prefix handling
5. Validate Base64 decoding for encoded values

## File References
- Ad network mappings: [Adnetworks.csv](mdc:Adnetworks.csv)
- Decoding implementation: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- Type definitions: [src/types/index.ts](mdc:src/types/index.ts)