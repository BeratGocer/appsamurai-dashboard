---
description: Ad network decoding implementation patterns and troubleshooting
---

# Ad Network Decoding Patterns

## Core Principle
**NEVER decode anything not explicitly listed in Adnetworkler.csv**. Only use exact matches from the CSV file.

## CSV-Based Decoding Strategy

### 1. Exact Match Priority
```typescript
// ✅ CORRECT: Only decode exact matches from CSV
const adNetworkMap: Record<string, string> = {
  'SCR': 'Copper',
  'SPE': 'Prime', 
  'SFT': 'Fluent',
  'aGNaOHZvZXNTOEE1': 'Freeward iFrame',
  'NTg1': 'AppsPrize',
  // ... all entries from Adnetworkler.csv
};

// Check exact match first
if (adNetworkMap[cleanCode]) {
  return adNetworkMap[cleanCode];
}
```

### 2. S-Prefix Rules (Preserved Logic)
```typescript
// S ile başlayan kodlar için özel kurallar korunur
if (cleanCode.startsWith('S')) {
  // SFT_ prefix → Fluent
  if (cleanCode.startsWith('SFT_')) {
    return 'Fluent';
  }
  
  // SIE_ prefix → Influence Mobile  
  if (cleanCode.startsWith('SIE_')) {
    return 'Influence Mobile';
  }
  
  // Suffix matching for S codes
  const suffixMappings = {
    'SCE': 'Catbyte',
    'SFT': 'Fluent',
    'SPE': 'Prime',
    // ... all S codes from CSV
  };
}
```

### 3. Numeric Pattern Handling
```typescript
// Numeric patterns like "48591_208110" → Fluent
if (/^\d+_/.test(cleanCode)) {
  return 'Fluent';
}
```

### 4. Raw Fallback
```typescript
// CSV'de olmayan her şey raw haliyle döndür
return cleanCode;
```

## Critical Rules
- ✅ **Exact Match Only**: Only decode codes explicitly in Adnetworkler.csv
- ✅ **No Base64 Decoding**: Never attempt to decode base64 strings
- ✅ **No Uydurma**: Never guess or invent decode mappings
- ✅ **S-Prefix Preserved**: Maintain existing S-prefix logic
- ✅ **Raw Fallback**: Return original code if not in CSV
- ✅ **CSV Source of Truth**: Adnetworkler.csv is the only source for mappings

## File References
- CSV mapping: [Adnetworkler.csv](mdc:Adnetworkler.csv)
- Decode function: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) - `decodeAdNetwork` function

## Implementation Pattern
```typescript
export function decodeAdNetwork(encryptedCode: string): string {
  // 1. Clean input
  let cleanCode = encryptedCode.trim();
  
  // 2. Handle special cases
  if (cleanCode === 'unknown') return 'Test';
  if (cleanCode === 'test') return 'Test';
  
  // 3. Check exact match from CSV
  if (adNetworkMap[cleanCode]) {
    return adNetworkMap[cleanCode];
  }
  
  // 4. S-prefix rules (preserved)
  if (cleanCode.startsWith('S')) {
    // SFT_, SIE_ prefix handling
    // Suffix matching for S codes
  }
  
  // 5. Numeric pattern → Fluent
  if (/^\d+_/.test(cleanCode)) {
    return 'Fluent';
  }
  
  // 6. Raw fallback
  return cleanCode;
}
```

## Testing Checklist
- [ ] CSV codes decode correctly
- [ ] S-prefix codes work as before
- [ ] Non-CSV codes return raw
- [ ] No base64 decoding attempts
- [ ] Numeric patterns map to Fluent
- [ ] Unknown codes return original