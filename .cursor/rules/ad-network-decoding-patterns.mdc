---
description: Ad network decoding implementation patterns and troubleshooting
---

# Ad Network Decoding Patterns

## Core Decoding Logic
The system uses two distinct methods for decoding ad network codes from [Adnetworks.csv](mdc:Adnetworks.csv):

### Method 1: S + First + Last Letter
- **Pattern**: S + Ad network name's first letter + last letter
- **Examples**: 
  - Prime → SPE (S + P + E)
  - Fluent → SFT (S + F + T)
  - Dynata → SDA (S + D + A)

### Method 2: First Two Characters
- **Pattern**: Use first two characters of the code itself
- **Examples**:
  - MTDSFDGVQ → MT → Fluent
  - WUdfadgqafdva → WU → Prime
  - ajdagfdavadva → aj → Prodege ySense iFrame

## Implementation in Code
The decoding logic is implemented in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) in the `decodeAdNetwork()` function:

```typescript
// Direct mappings from Adnetworks.csv
const adNetworkMap: Record<string, string> = {
  'SCR': 'Copper',
  'SPE': 'Prime',
  'SFT': 'Fluent',
  'SDA': 'Dynata',
  'MT': 'Fluent',
  'WU': 'Prime',
  'aj': 'Prodege ySense iFrame',
  // ... complete list from Adnetworks.csv
};

// Prefix-based decoding using startsWith()
for (const [prefix, adNetwork] of Object.entries(prefixMappings)) {
  if (cleanCode.startsWith(prefix)) {
    return adNetwork;
  }
}
```

## Critical Rules
- ✅ Always use `startsWith()` for prefix matching
- ✅ Check first two characters for Method 2 codes
- ✅ Maintain complete sync with [Adnetworks.csv](mdc:Adnetworks.csv)
- ✅ Handle special cases (SFT_, SIE_, MT prefixes)
- ✅ Support both campaign_network and adgroup_network decoding

## Testing Examples
When testing decoding logic, use these examples:
- `MTDSFDGVQ` → `Fluent` (MT prefix)
- `WUdfadgqafdva` → `Prime` (WU prefix)
- `ajdagfdavadva` → `Prodege ySense iFrame` (aj prefix)
- `SPE_anything` → `Prime` (SPE prefix)
- `SFT_anything` → `Fluent` (SFT prefix)

## Troubleshooting
- If decoding fails, check if code exists in [Adnetworks.csv](mdc:Adnetworks.csv)
- Verify `startsWith()` logic is working correctly
- Ensure prefix mappings are complete and up-to-date
- Test with various code lengths and formats