---
description: Ad network decoding implementation patterns and troubleshooting
globs: src/utils/csvParser.ts,Adnetworkler.csv
---

# Ad Network Decoding Patterns

## Core Implementation
The ad network decoding system in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) uses explicit mappings from [Adnetworkler.csv](mdc:Adnetworkler.csv) rather than generic Base64 decoding.

## Key Functions
- `decodeAdNetwork(code: string): string` - Main decoding function
- `findMapping(mappings: Record<string, string>, searchCode: string)` - Case-insensitive mapping lookup

## Mapping Types
1. **S Network Codes**: SPE, SDA, SFT, etc. (prefix/suffix matching)
2. **Base64 Codes**: Explicit mappings only (no generic Base64 decoding)
3. **PTSDK Codes**: PTSDK_H_ prefixed codes
4. **Number_Number Pattern**: `^\d+_\d+$` → Always "Fluent"

## Critical Rules
- ✅ **NO Generic Base64 Decoding**: Only use explicit mappings from CSV
- ✅ **Case Insensitive**: Use `findMapping()` for flexible case handling
- ✅ **Explicit Mappings Only**: All codes must be defined in Adnetworkler.csv
- ✅ **Pattern Matching**: Support regex patterns for number_number format
- ✅ **Prefix/Suffix Matching**: Handle S codes with various formats

## Common Patterns
```typescript
// Case-insensitive mapping lookup
const findMapping = (mappings: Record<string, string>, searchCode: string): string | null => {
  for (const [key, value] of Object.entries(mappings)) {
    if (key.toLowerCase() === searchCode.toLowerCase()) {
      return value;
    }
  }
  return null;
};

// Number_number pattern (all Fluent)
if (/^\d+_\d+$/.test(cleanCode)) {
  return 'Fluent';
}
```

## Troubleshooting
- **"saçma sapan" decode results**: Check for generic Base64 decoding (should be removed)
- **Case sensitivity issues**: Use `findMapping()` instead of direct key lookup
- **Missing mappings**: Add explicit entries to Adnetworkler.csv
- **Duplicate mappings**: Remove uppercase versions, use case-insensitive lookup

## CSV Format
Adnetworkler.csv format: `code,network_name`
- Example: `LV9UVnNKZTY4WjZW,Ad It Up`
- Example: `MTkwMzZ8,Fluent`