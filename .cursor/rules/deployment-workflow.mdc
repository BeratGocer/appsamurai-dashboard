---
description: Deployment workflow and production verification patterns
---

# Deployment Workflow Patterns

## Overview
This rule documents the complete deployment workflow for the AppSamurai Dashboard, including Git operations, build process, and production verification.

## Deployment Architecture
- **Frontend**: Netlify at `https://ubiquitous-sherbet-b4f6bf.netlify.app/`
- **Backend**: Railway at `https://backend-production-80f6.up.railway.app/`
- **GitHub**: `https://github.com/BeratGocer/appsamurai-dashboard`

## Complete Deployment Workflow

### 1. Code Changes
```bash
# Stage all changes
git add .

# Commit with timestamp
git commit -m "Auto-commit: $(date +%Y-%m-%d_%H:%M:%S) - [description]"

# Push to GitHub
git push origin main
```

### 2. Build Process
```bash
# Clean build (recommended for major changes)
rm -rf dist/
npm run build

# Standard build
npm run build
```

### 3. Netlify Deployment
```bash
# Deploy to production
netlify deploy --prod --dir=dist
```

## Production Verification

### Browser Automation Testing
Use Playwright for production verification:

```typescript
// Navigate to production site
await page.goto('https://ubiquitous-sherbet-b4f6bf.netlify.app/')

// Test specific functionality
await page.click('[data-testid="uploaded-file"]')
await page.screenshot({ path: 'verification.png' })
```

### Cache Management
- **Hard Refresh**: `Control+Shift+R` for cache clearing
- **Unique Deploy URLs**: Use for testing fresh deployments
- **Service Worker**: Clear browser caches when needed

## Common Issues and Solutions

### Issue: Changes Not Visible After Deployment
**Solutions**:
1. Check unique deploy URL for fresh deployment
2. Clear browser cache with hard refresh
3. Verify build process completed successfully
4. Check Netlify build logs for errors

### Issue: Multiple Components Rendering Same Content
**Solution**: Search all components for similar patterns:
```bash
grep -r "pattern" src/
```

### Issue: Deployment Fails
**Solutions**:
1. Check Git status for uncommitted changes
2. Verify build process locally first
3. Check Netlify configuration
4. Review build logs for specific errors

## Critical Rules
- ✅ Always push to Git before deploying
- ✅ Use fresh builds for major changes (`rm -rf dist/`)
- ✅ Test with browser automation after deployment
- ✅ Use unique deploy URLs for verification
- ✅ Clear browser cache when testing changes
- ✅ Check multiple components if changes don't appear
- ✅ Verify production URL shows expected changes

## File Monitoring
This workflow applies to all project files except:
- `node_modules/`
- `dist/`
- `.git/`
- `.DS_Store`
- `*.log`

## Build Output
- **Entry Point**: `dist/index.html`
- **Assets**: `dist/assets/index-[hash].js` and `dist/assets/index-[hash].css`
- **Size**: ~495KB JS, ~36KB CSS (gzipped)

## Safety Measures
- Only staged files are committed
- Commit messages include timestamp
- Push only to main branch
- No force push operations
- Preserves existing Git history
- Build process creates fresh dist/ directory
- Deploy only to production environment