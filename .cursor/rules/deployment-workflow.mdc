---
alwaysApply: true
description: Deployment workflow and production verification patterns
---

# Deployment Workflow

## Architecture
- **Frontend**: Netlify at `https://ubiquitous-sherbet-b4f6bf.netlify.app/`
- **Backend**: Railway at `https://appsamurai-dashboard-backend-production-83b0.up.railway.app/`
- **GitHub**: `https://github.com/BeratGocer/appsamurai-dashboard`

## Deployment Sequence

### 1. Git Operations
```bash
# Stage all changes
git add .

# Commit with timestamp
git commit -m "Auto-commit: $(date +%Y-%m-%d_%H:%M:%S) - [description]"

# Push to GitHub
git push origin main
```

### 2. Frontend Deploy
```bash
# Build frontend
npm run build

# Deploy to Netlify
netlify deploy --prod --dir=dist
```

### 3. Backend Deploy
```bash
# Build backend
cd server && npm run build

# Deploy to Railway
railway up
```

## Critical Rules
- ✅ **Always Push First**: Git push before any deployment
- ✅ **Build Before Deploy**: Run build commands before deployment
- ✅ **Test After Deploy**: Verify deployment success
- ✅ **Error Handling**: Report failures to user
- ✅ **Sequential Process**: Complete each step before next

## Post-Deploy Testing

### Health Checks
```bash
# Backend health check
curl -H "x-api-key: public-demo-key" https://appsamurai-dashboard-backend-production-83b0.up.railway.app/api/health

# Files endpoint test
curl -H "x-api-key: public-demo-key" https://appsamurai-dashboard-backend-production-83b0.up.railway.app/api/files
```

### Frontend Testing
- Navigate to production URL
- Check console for errors
- Verify file loading works
- Test settings functionality

## Error Recovery
If any step fails:
1. **Git Push Failed**: Try `git pull origin main` then retry
2. **Frontend Build Failed**: Check TypeScript errors
3. **Netlify Deploy Failed**: Check build output
4. **Backend Build Failed**: Check server TypeScript errors
5. **Railway Deploy Failed**: Check Railway logs and retry

## Success Indicators
- ✅ Git push successful
- ✅ Frontend build successful
- ✅ Netlify deploy successful
- ✅ Backend build successful
- ✅ Railway deploy successful
- ✅ Health check returns 200 OK
- ✅ Files endpoint returns data

## Browser Testing
Use Playwright for production verification:
```typescript
// Navigate to production site
await page.goto('https://ubiquitous-sherbet-b4f6bf.netlify.app/')

// Test file loading
await page.waitForSelector('[data-testid="file-list"]')

// Test settings functionality
await page.click('[data-testid="settings-button"]')
```

## Monitoring
- **Build Logs**: Check Netlify and Railway build logs
- **Console Errors**: Monitor browser console for errors
- **Network Requests**: Verify API calls are successful
- **Performance**: Check page load times and responsiveness