# Error Handling Patterns

## Backend Error Responses
The chat endpoint returns specific error codes:

```typescript
// Missing API key
if (!apiKey) {
  return reply.code(500).send({ error: 'missing_api_key' })
}

// Invalid message
if (!message || typeof message !== 'string') {
  return reply.code(400).send({ error: 'invalid_message' })
}

// OpenAI API failure
if (!res.ok) {
  return reply.code(502).send({ error: 'llm_failed' })
}

// General chat failure
catch (err) {
  reply.code(500).send({ error: 'chat_failed' })
}
```

## Frontend Error Handling
The ChatAssistant component handles errors gracefully:

```typescript
try {
  const reply = await apiChat(userText, context)
  setHistory(h => [...h, { role: 'assistant', text: reply }])
} catch (e) {
  setHistory(h => [...h, { 
    role: 'assistant', 
    text: 'Üzgünüm, şu an cevap oluşturulamadı.' 
  }])
} finally {
  setLoading(false)
}
```

## Common Error Scenarios
1. **`missing_api_key`**: Railway environment variable not set
2. **`invalid_message`**: Empty or malformed chat message
3. **`llm_failed`**: OpenAI API connection or rate limit issue
4. **`chat_failed`**: General backend error
5. **Network errors**: Frontend can't reach backend

## Troubleshooting Steps
1. **Check Railway variables**: `railway variables`
2. **Test backend endpoint**: `curl -X POST https://backend-production-80f6.up.railway.app/chat`
3. **View Railway logs**: `railway logs`
4. **Verify API key**: Check OpenAI dashboard
5. **Check network**: Ensure Railway service is running

## User Experience
- ✅ Show loading state during API calls
- ✅ Display user-friendly Turkish error messages
- ✅ Maintain chat history even on errors
- ✅ Allow retry without losing context
- ✅ Graceful fallback for missing data

## Critical Rules
- ❌ Never expose API keys in error messages
- ❌ Never crash the UI on chat errors
- ✅ Always provide user-friendly error messages
- ✅ Log errors for debugging
- ✅ Handle network timeouts gracefully
- ✅ Retry failed requests when appropriate
