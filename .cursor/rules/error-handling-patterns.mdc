# Error Handling Patterns

## Common Upload Errors

### 413 Payload Too Large
- **Cause**: File size exceeds server body limit
- **Solution**: Implement chunked upload in [FileUpload.tsx](mdc:src/components/FileUpload.tsx)
- **Backend Fix**: Increase `bodyLimit` in [server/src/index.ts](mdc:server/src/index.ts)

### 500 Internal Server Error
- **Cause**: CSV parsing failures or database errors
- **Solution**: Robust parsing with error handling
- **Debug**: Check server logs for specific error details

### "ingest failed" Error
- **Common Causes**:
  - Malformed CSV data
  - Missing required headers
  - Invalid numeric values
  - Database constraint violations
- **Solution**: Implement data sanitization and validation

## File Management Issues

### Deleted Files Reappearing
- **Cause**: Frontend state not synced with backend
- **Solution**: Proper state management in [App.tsx](mdc:src/App.tsx)
- **Pattern**: Always call backend API for file operations

### Empty Files After Upload
- **Cause**: CSV parsing failed silently
- **Solution**: Validate data before database insert
- **Debug**: Check server logs for parsing errors

## Debugging Steps
1. **Check Server Logs**: Look for specific error messages
2. **Validate CSV Format**: Ensure proper headers and data structure
3. **Test with Small File**: Verify upload process works
4. **Check Database**: Verify data was inserted correctly
5. **Frontend Console**: Look for JavaScript errors

## Best Practices
- Always log errors with context
- Provide user-friendly error messages
- Implement graceful degradation
- Validate data at multiple levels
- Use TypeScript for type safety
