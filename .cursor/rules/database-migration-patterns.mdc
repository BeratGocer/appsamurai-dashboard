---
description: Database migration patterns and deployment workflow
---

# Database Migration Patterns

## Railway Deployment Issues
When deploying to Railway, ensure database migrations run properly:

### Common Issues
- **502 Bad Gateway**: Usually indicates `DATABASE_URL` environment variable missing
- **DB insert error**: Database tables don't exist - migrations haven't run
- **Timeout errors**: Large CSV files (5000+ rows) may cause Railway timeouts

### Migration Setup
```typescript
// In server/src/index.ts - Add database connection check
const prisma = new PrismaClient()

try {
  await prisma.$executeRaw`SELECT 1`
  console.log('Database connection successful')
  
  // Check if tables exist, if not run migrations
  try {
    await prisma.$executeRaw`SELECT * FROM "CampaignRow" LIMIT 1`
    console.log('Tables already exist')
  } catch (error) {
    console.log('Tables do not exist, running migrations...')
    const { execSync } = require('child_process')
    execSync('npx prisma migrate deploy', { stdio: 'inherit' })
    console.log('Migrations completed')
  }
} catch (error) {
  console.error('Database connection failed:', error)
  process.exit(1)
}
```

### Railway CLI Commands
```bash
# Add PostgreSQL database
railway add --database postgres

# Check environment variables
railway variables

# Force deploy
railway up --detach

# View logs
railway logs --deployment
```

### Environment Variables Required
- `DATABASE_URL`: PostgreSQL connection string (auto-generated by Railway)
- `OPENAI_API_KEY`: For chat functionality
- `RAILWAY_ENVIRONMENT`: production

### Troubleshooting Steps
1. Check Railway dashboard for `DATABASE_URL` variable
2. Restart backend service if migrations fail
3. Use Railway CLI for force deployment
4. Monitor logs for migration errors
5. Test with small CSV files first before large uploads