---
description: CSV parsing debugging patterns and error handling
---

# CSV Parsing Debugging Patterns

## Core Files
- **Main Parser**: [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts)
- **Ad Network Mappings**: [Adnetworkler.csv](mdc:Adnetworkler.csv)
- **Sample Data**: [ovivo-tuna.csv](mdc:ovivo-tuna.csv)

## Key Functions
- `parseCampaignNetwork(campaignNetwork: string)` - Parses campaign network strings
- `normalizePublisher(publisherRaw: string)` - Normalizes publisher names
- `decodeAdNetwork(code: string)` - Decodes ad network codes

## Common Debugging Scenarios

### 1. "saçma sapan" Decode Results
**Problem**: Codes decode to nonsensical characters like "Publisher: 12–1–|"
**Root Cause**: Generic Base64 decoding without explicit mappings
**Solution**: Remove generic Base64 decoding, use only explicit mappings

### 2. Case Sensitivity Issues
**Problem**: `LV9UVnNKZTY4WjZW` doesn't decode but `LV9UVNNKZTY4WJZW` does
**Root Cause**: Hardcoded case conversion without flexible lookup
**Solution**: Use `findMapping()` function for case-insensitive lookup

### 3. Missing Mappings
**Problem**: New codes not decoding (e.g., `MTkxNDF8`)
**Root Cause**: Code not added to Adnetworkler.csv
**Solution**: Add explicit mapping: `MTkxNDF8,Fluent`

### 4. Pattern Matching Failures
**Problem**: `34631_200222` not recognized as Fluent
**Root Cause**: Regex pattern not implemented
**Solution**: Add pattern: `if (/^\d+_\d+$/.test(cleanCode)) return 'Fluent';`

## Debugging Workflow
1. **Identify the problematic code**
2. **Check if it exists in Adnetworkler.csv**
3. **Verify case sensitivity in mapping**
4. **Test with `findMapping()` function**
5. **Add explicit mapping if missing**
6. **Test with various case combinations**

## Testing Function
```typescript
function testAdNetworkDecoding(): void {
  const testCodes = [
    'LV9UVnNKZTY4WjZW',  // Should be Ad It Up
    'MTkwMzZ8',          // Should be Fluent
    'MTkxNDF8',          // Should be Fluent
    '34631_200222',      // Should be Fluent
    'SPE_WUpaY0xnb1A3QWNh' // Should be Prime
  ];
  
  testCodes.forEach(code => {
    console.log(`${code} → ${decodeAdNetwork(code)}`);
  });
}
```

## Critical Rules
- ✅ **No Generic Base64**: Only explicit mappings from CSV
- ✅ **Case Insensitive**: Use flexible mapping functions
- ✅ **Explicit Mappings**: All codes must be in Adnetworkler.csv
- ✅ **Pattern Support**: Handle regex patterns for special formats
- ✅ **Test Thoroughly**: Test with various case combinations

## Error Prevention
- Always add explicit mappings to CSV
- Use case-insensitive lookup functions
- Test new mappings with multiple case variations
- Avoid generic decoding that produces "saçma sapan" results
- Document pattern matching rules clearly