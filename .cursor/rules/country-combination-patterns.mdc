---
description: Country combination patterns for campaign data display
---

# Country Combination Patterns

## Overview
When multiple countries are detected in campaign data, combine them with "and" instead of showing "Global".

## Implementation Pattern
```typescript
// Combine multiple countries with "and" instead of showing "Global"
const countryDisplay = countries.length > 1 
  ? countries.join(' and ') 
  : countries[0] || 'Global';
```

## Examples
- **Multiple Countries**: "Germany and France" instead of "Global"
- **Single Country**: "Germany" 
- **No Countries**: "Global"

## Usage in Campaign ID Generation
The `generateCampaignId` function in [src/utils/csvParser.ts](mdc:src/utils/csvParser.ts) uses this pattern:

```typescript
export function generateCampaignId(data: CampaignData[]): string {
  if (data.length === 0) return '';
  
  // Get unique values from the data
  const games = [...new Set(data.map(row => extractGameName(row.app)))];
  const countries = [...new Set(data.map(row => {
    const parsed = parseCampaignNetwork(row.campaign_network);
    return parsed.country || 'Global';
  }))];
  
  // Sort for consistent ID generation
  games.sort();
  countries.sort();
  
  // Combine multiple countries with "and" instead of showing "Global"
  const countryDisplay = countries.length > 1 
    ? countries.join(' and ') 
    : countries[0] || 'Global';
  
  // Create a unique identifier based on games and countries
  return `${games.join('|')}-${countryDisplay}`;
}
```

## Critical Rules
- ✅ Always combine multiple countries with " and " separator
- ✅ Use alphabetical sorting for consistent results
- ✅ Fallback to "Global" only when no countries detected
- ✅ Maintain backward compatibility with existing single-country data
- ✅ Apply this pattern in campaign matching algorithms

## Benefits
- More descriptive campaign identification
- Better user understanding of campaign scope
- Improved campaign matching accuracy
- Clearer data visualization in dashboard