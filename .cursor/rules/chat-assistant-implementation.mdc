# Chat Assistant Implementation

## Frontend Components
- **Global Chat Component**: [src/components/GlobalChatAssistant.tsx](mdc:src/components/GlobalChatAssistant.tsx)
- **Chat Context**: [src/contexts/ChatContext.tsx](mdc:src/contexts/ChatContext.tsx) - global state management
- **API Integration**: [src/utils/api.ts](mdc:src/utils/api.ts) - chat endpoint calls

## Backend Implementation
- **Chat Endpoint**: [server/src/index.ts](mdc:server/src/index.ts) - `/chat` route
- **OpenAI Integration**: Uses `gpt-4o-mini` model with Turkish system prompt
- **Error Handling**: Graceful fallbacks for API failures

## Key Features
1. **Global Access**: Available on all pages via React Context
2. **Minimization Support**: Can be minimized to small floating form
3. **Turkish Language Support**: System prompt in Turkish
4. **Context Awareness**: Receives dashboard data context
5. **Real-time Responses**: Async chat interface
6. **Error Handling**: Shows "Üzgünüm, şu an cevap oluşturulamadı" on failures
7. **Intent-Based Navigation**: Only navigates when specific game/publisher intents detected

## Environment Variables
- `OPENAI_API_KEY`: Required for chat functionality
- Railway deployment configuration needed

## Usage Pattern
```typescript
// Frontend chat call
const response = await fetch('/chat', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ message, context })
});
```

## System Prompt
Chat assistant is configured to:
- Provide short, clear Turkish responses
- Analyze campaign performance data
- Use percentage formatting for ROAS values
- Format numbers in Turkish style
- Focus on requested publisher information
description:
globs:
alwaysApply: true
---
